local str = require("@std/str")

local daleki_obriyi_lyrics = [[
	"–î–∞–ª–µ–∫—ñ –û–±—Ä—ñ—ó" by Ignea
	
	–ù–µ–Ω–∞—á–µ —É –∑–æ–ª–æ—Ç—ñ–π –∫–ª—ñ—Ç—Ü—ñ
	–û—Ö–æ–ø–ª–µ–Ω–∞ –≥–∞–º–æ—é –±–∞—Ä–≤
	–ù–µ c—Ç–µ—Ä–ø–ª—è—Ç—å –º–∏ –±—ñ–¥–Ω—ñ –∑—ñ–Ω–∏—Ü—ñ
	–©–æ–¥–Ω—è - –Ω–µ–±—É–¥–µ–Ω–Ω–∏–π —á–∞—Ä
	–ú—ñ—Ü–Ω—ñ —Ç–∞—Ç—É–π–æ–≤–∞–Ω—ñ –ª–∏—Ü—è
	–ë–æ—Ä–æ–Ω—è—Ç—å –º–∏–Ω—É–ª–µ —Å–≤–æ—î
	–ü—Ä–æ—â–∞–ª—å–Ω–µ —Å–ª–æ–≤–æ "–≤–µ—Ä–Ω—ñ—Ç—å—Å—è"
	–°–ø—ñ—Ç–∫–∞—î —É—Å—é–¥–∏ –º–µ–Ω–µ
	–¢–∞–º –¥–µ –∂–æ–¥–Ω–∏—Ö –ª–∏—Å—Ç—ñ–≤ –Ω–µ –±—É–≤–∞—î
	–°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ –∫–æ–º—É –Ω–µ –ø–∏—Ç–∞—é—Ç—å
	–ü–æ–ª—é—é –Ω–∞ –∫–∞–¥—Ä–∏ —Å–≤—ñ—Ç—É, —â–æ –∑–Ω–∏–∫–∞—î
	–î–∞–ª–µ–∫—ñ –æ–±—Ä—ñ—ó –∫–ª–∏—á—É—Ç—å —ñ –º–∞–Ω—è—Ç—å
	–¢—Ä–µ–º—Ç—ñ–ª–∞, –ª–∞–º–∞–ª–∞—Å—å, –±–ª–∞–≥–∞–ª–∞
	–ó–≤–∏–≤–∞–ª–∞—Å—å —Ñ—ñ–ª—å–º–æ–≤–∞ —Ç–∞—Å—å–º–∞
	–î–Ω–æ –ø—Ä–æ–ø–∞—Å—Ç—ñ - –∫–∞—Ä–Ω–∞ –≤–∏–ø—Ä–∞–≤–∞
	–†–æ–∑—Å—É–¥–∏—Ç—å –ø—Ä–∞–ª—ñ—Å–Ω–∞ —ñ–º–ª–∞
	–ö–æ—Ä–∞–ª–µ–≤—ñ —Å–∫–µ–ª—ñ —ñ –º—É—Ä–∏
	–ö–≤—ñ—Ç–∫–æ–≤–∏–π –≤—ñ–≤—Ç–∞—Ä –Ω–∞ –Ω–æ–∂–∞—Ö
	–¢–µ–ø–µ—Ä –º–µ–Ω–µ –∑–≤–∞—Ç–∏ –¢–µ—É—Ä–∞
	–¢–µ–ø–µ—Ä —è - –±–∞–≥—Ä—è–Ω–∏–π –ø—Ç–∞—Ö!
	–ú–æ—ó —Å–≤—ñ—Ç–ª–∏–Ω–∏ –Ω–µ –≤ –∑–º–æ–∑—ñ –ø–µ—Ä–µ–¥–∞—Ç–∏
	–ù–µ–∑–µ–º–Ω–æ—ó –∫—Ä–∞—Å–∏ —ñ –æ–º–∞–Ω–∏
	–õ—é–¥–∏ —Ç–∞–º –Ω–µ –∂–∏–≤—É—Ç—å - –≤–∏–∂–∏–≤–∞—é—Ç—å
	–î–∞–ª–µ–∫—ñ –æ–±—Ä—ñ—ó –≤–∞–±–ª—è—Ç—å, –∂–∞—Ö–∞—é—Ç—å
]]

local function basichelperfunctions()
	assert(
		str.startswith(
			str.slice(
				str.trimfront(daleki_obriyi_lyrics), 0, 12
			),
			"\"–î–∞–ª"
		) == true, "str oops"
	)
end

basichelperfunctions()

local function strsplit()
	local a1 = "–î–∞–ª–µ–∫—ñ"
	assert(str.split(a1)[3] == "–ª", "–î–∞–ª–µ–∫—ñ third index not –ª")
	
	local chars = str.split("seals ü¶≠ say hi", " ", "hi")
	assert(
		chars[1] == "seals" 
		and chars[2] == "ü¶≠"
		and chars[3] == "say"
		and chars[4] :: any == nil, -- we had an issue with empty final string from separators
		"str.split with seal emoji not worked?"
	)
end

strsplit()

local function strsplitbutoopswehaveinvalidunicode()
	local fs = require("@std/fs")
	local nanuk_png_path = fs.path.join(".", "tests", "data", "nanuk.png")
	local png_header_buffy = fs.readbytes(nanuk_png_path, 0, 124)
	local hstring = buffer.tostring(png_header_buffy)
	local _ = str.split(hstring) -- atp we want to just make sure it doesn't fail
end

strsplitbutoopswehaveinvalidunicode()

local function strgraphemes()
	local utf8_string = "‡§π‡§æ‡§Ø ‡§Æ‡•à‡§Ç ‡§è‡§ï ‡§∏‡•Ä‡§≤ ‡§π‡•Ç‡§Å ü¶≠ (hi i am a seal ü¶≠)"
	-- note we have some weirdness with iterating over hindi characters w/ unicode_reader's 
	-- extended mode which i assume is the default from it using unicode_segmentation
	-- this means we can get graphemes that dont render properly in terminals
	for offset, grapheme in str.graphemes(utf8_string) do
		if offset == 7 then
			assert(grapheme == "‡§ï", "7th byte not ‡§ï")
		end
	end
end

strgraphemes()

local function splitar()
	local line = `function Cat.meow(name: string, age: number)`
	local tokens = str.splitar(line, " ", ".", "(", ":", ",", ")")
	assert(tokens[1] == "function", "first token should be function")
	assert(tokens[3] == "Cat", "third token should be Cat")
	assert(tokens[9] == " ", "9th token should be whitespace ' '")
	assert(tokens[#tokens] == ")", "last token should be )")
end

splitar()

local function strsplitarunicode()
	local keepy = "‡§π‡§æ‡§Ø ‡§Æ‡•à‡§Ç ‡§è‡§ï ‡§∏‡•Ä‡§≤ ‡§π‡•Ç‡§Å ü¶≠ (hi i am a seal ü¶≠)"
	local sealed = str.splitar(keepy, "ü¶≠")
	assert(sealed[2] == "ü¶≠", "2nd index should be ü¶≠")
end

strsplitarunicode()